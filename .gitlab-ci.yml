stages:
  - build
  - test
  - post-test
  - pre-release
  - release

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

default:
  image: python:3
  before_script:
    - pip install nox tomli
  cache:
    paths:
      - .cache/pip

build:
  stage: build
  script:
    - nox --forcecolor -s build
  artifacts:
    paths:
      - dist/

lint:
  stage: test
  script:
    - nox --forcecolor -s lint

mypy:
  stage: test
  script:
    - nox --forcecolor -s mypy

sec-check:
  stage: test
  script:
    - nox --forcecolor -s sec-check

test:
  stage: test
  parallel:
    matrix:
      - PY: ["3.8", "3.9", "3.10", "3.11"]
        DEPS_VERSION: ["min_deps_version", "latest_deps_version"]
        PKG_FORMAT: ["src", "whl"]
  image: python:$PY
  script:
    # "%%-*" strips the longest possible match of "-*" from the right:
    - >-
      nox --forcecolor -s "test-${PY%%-*}($PKG_FORMAT, $DEPS_VERSION)" --
      --junit-xml=report-${PY%%-*}-${PKG_FORMAT}-${DEPS_VERSION}.xml
  artifacts:
    paths:
      - ".coverage"
      - ".coverage.*"
    reports:
      junit: "report-*.xml"

test-coverage:
  stage: post-test
  script:
    - nox --forcecolor -s coverage-report
  coverage: '/^TOTAL.*\s+(\d+\%)\s*$/'
  artifacts:
    paths:
      - "htmlcov"
    reports:
      coverage_report:
        coverage_format: 'cobertura'
        path: 'coverage.xml'

release-check:
  stage: pre-release
  only:
    - tags
  except:
    - schedules
  variables:
    TWINE_USERNAME: "__token__"
    TWINE_PASSWORD: "$TEST_PYPI_TOKEN"
    TWINE_REPOSITORY_URL: "https://test.pypi.org/legacy/"
    TWINE_NON_INTERACTIVE: "1"
  script:
    - pip install twine
    - twine check dist/*
    - twine upload  dist/*

release:
  stage: release
  only:
    - tags
  except:
    - schedules
  when: manual
  variables:
    TWINE_USERNAME: "__token__"
    TWINE_PASSWORD: "$UPLOAD_PYPI_TOKEN"
    TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
    TWINE_NON_INTERACTIVE: "1"
  script:
    - pip install twine
    - twine upload dist/*
